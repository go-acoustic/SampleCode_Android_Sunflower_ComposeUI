/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Gradle task: replaceWithConnectComposeWrapper
 *
 * Scans Kotlin source files (excluding tests) and replaces:
 *   Text(...)              → LoggedText(...)
 *   TextField(...)         → LoggedTextField(...)
 *   OutlinedTextField(...) → LoggedOutlinedTextField(...)
 *   ButtCon(...)           → LoggedButton
 *
 * Skip nested calls if preceded by '{ ' (e.g., inside lambda blocks).
 * Ensure import statements for any used Logged composables.
 *
 * Regex pattern summary:
 *   (?<!\{ )   Negative lookbehind: not preceded by "{ ".
 *   \bKEY\b    Word boundary: match whole composable name.
 *   \s*\(      Optional whitespace + '('.
 *   ([^)]*)      Capture all args (simple, no nested parentheses).
 *   \)          Closing parenthesis.
 *
 * Usage:
 *   Create/Copy connect-composables.gradle file under project's root folder
 *   apply from: '../connect-composables.gradle'
 *   ./gradlew replaceWithConnectComposeWrapper
 */
tasks.register("replaceWithConnectComposeWrapper") {
    group = 'custom'
    description = 'Replace Compose calls with Connect SDK wrappers, skip nested, and add imports.'

    // Opt‑out of config‑cache (task mutates sources in‑place)
    notCompatibleWithConfigurationCache("Mutates Kotlin sources; simpler than implementing a cacheable task type.")

    // The actual work of the task should be in a doLast or doFirst block.
    doLast {
        def composables = [
                Text             : 'LoggedText',
                TextField        : 'LoggedTextField',
                OutlinedTextField: 'LoggedOutlinedTextField',
                Button           : 'LoggedButton'
        ]

        println "\n----- Starting replaceWithConnectComposeWrapper -----\n"
        println "Mapping: $composables"

        def ktFiles = fileTree(dir: project.projectDir,
                includes: ['**/*.kt'],
                excludes: ['**/{test,androidTest}/**']
        )
        println "Scanning ${ktFiles.files.size()} Kotlin files..."

        int count = 0
        ktFiles.each { File file ->
            String original = file.getText('UTF-8')
            String result = original

            // Perform replacements
            composables.each { key, wrapper ->
                def pattern = java.util.regex.Pattern.compile("(?<!\\{ )\\b${key}\\b\\s*\\(([^)]*)\\)")
                def matcher = pattern.matcher(result)
                result = matcher.replaceAll(wrapper + '($1)')
            }

            // Compute which wrappers are present in result
            def neededImports = composables.values().findAll { wrapper ->
                result =~ java.util.regex.Pattern.compile("\\b${wrapper}\\b\\s*\\(")
            }.toSet()

            // Insert missing imports
            if (neededImports) {
                def lines = result.readLines()
                int idx = lines.findLastIndexOf { it.startsWith('import ') }
                if (idx < 0) idx = lines.findIndexOf { it.startsWith('package ') }
                neededImports.each { wrapper ->
                    def importLine = "import com.acoustic.connect.android.connectmod.composeui.customcomposable.${wrapper}"
                    if (!result.contains(importLine)) {
                        lines.add(idx + 1, importLine)
                        idx++
                    }
                }
                result = lines.join('\n')
            }

            if (original != result) {
                file.write(result, 'UTF-8')
                println "✓ Updated: ${file.path}"
                count++
            }
        }

        println "\nDone. $count file(s) updated."
        println "----- Completed replaceWithConnectComposeWrapper -----\n"
    }
}

